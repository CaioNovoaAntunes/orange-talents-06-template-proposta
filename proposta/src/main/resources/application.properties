# JPA
spring.jpa.hibernate.ddl-auto=create
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3307/proposta?createDatabaseIfNotExist=true}
spring.datasource.username=user
spring.datasource.password=123
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true

#spring.jpa.show-sql: true
#Feign
analise.url=${ANALISE_URL/api/solicitacao:http://localhost:9999/api/solicitacao}
cartoes.url=${CONTAS_URL/api/cartoes:http://localhost:8888/api/cartoes}
contas.url=${CONTAS_URL/api/contas:http://localhost:8888/api/contas}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/master}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/master/protocol/openid-connect/certs}

management.endpoint.health.status.http-mapping.down=500
management.endpoints.web.exposure.include=health, metrics, prometheus
management.endpoints.prometheus.enabled=true

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}